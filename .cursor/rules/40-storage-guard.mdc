---
description: Enforce vendor-neutral StorageProvider and signed-URL pattern (Supabase behind adapter, RLS ON).
globs:
  - "src/lib/**"
  - "src/app/api/**/upload/**"
  - "src/app/api/**/preview/**"
  - "schemas/**"
alwaysApply: false
---
## Design
- All storage access goes through:
  interface StorageProvider {
    createSignedUploadUrl(key: string, contentType: string): Promise<{ url: string; expiresAt: string }>;
    getSignedReadUrl(key: string, ttlSec: number): Promise<string>;
  }
- Default impl: Supabase at `src/lib/storage/supabase.ts`.
- **Do not** import `@supabase/supabase-js` outside `src/lib/storage/supabase.ts`.

## Security
- **RLS** must be enabled on DB/storage.
- **Signed URLs only** for upload/read. No public buckets for preview media.
- Service role key: server-side only (never in browser).

## Supabase specifics (adapter must use)
- createSignedUploadUrl(...) for uploads (valid ~2h)
- createSignedUrl(...) / createSignedUrls(...) for time-limited reads
- TTL for preview links should be minimal & configurable (e.g., 300s)

## Contract (evidence-friendly)
- Return only signed URLs + expiry metadata. Do not leak raw storage paths publicly.
- Evidence should record expiry and provider.

## Lint hint (team policy)
- If direct import of '@supabase/supabase-js' is detected outside adapter, propose codemod â†’ central adapter.
