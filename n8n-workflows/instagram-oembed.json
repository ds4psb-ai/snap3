{
  "name": "Instagram oEmbed/Graph API Collector",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "instagram-metadata",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Instagram Metadata Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "instagram-metadata"
    },
    {
      "parameters": {
        "functionCode": "// Extract Instagram post URL and determine approach\nconst url = items[0].json.url;\nconst accessToken = $env.INSTAGRAM_ACCESS_TOKEN;\n\n// Check if it's a valid Instagram URL\nif (!url.match(/instagram\\.com\\/(p|reel|tv)\\/[a-zA-Z0-9_-]+/)) {\n  throw new Error('Invalid Instagram URL');\n}\n\nreturn [{\n  json: {\n    url,\n    accessToken,\n    hasToken: !!accessToken,\n    useOEmbed: !accessToken // Fallback to oEmbed if no token\n  }\n}];"
      },
      "id": "check-instagram-url",
      "name": "Check Instagram URL",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.useOEmbed }}",
              "value2": "true"
            }
          ]
        }
      },
      "id": "route-by-token",
      "name": "Route by Token Availability",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "=https://www.instagram.com/oembed/?url={{ $json.url }}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "oembed-call",
      "name": "Instagram oEmbed Call",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "functionCode": "// Note: Full Graph API implementation would require media ID extraction\n// This is a placeholder for when proper access token is available\nconst url = items[0].json.url;\n\nreturn [{\n  json: {\n    error: 'Graph API requires valid access token and media ID extraction',\n    fallbackToOEmbed: true,\n    url\n  }\n}];"
      },
      "id": "graph-api-placeholder",
      "name": "Graph API (Token Required)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "functionCode": "// Transform Instagram oEmbed response to VDP metadata format\nconst response = items[0].json;\n\nif (response.error) {\n  return [{\n    json: {\n      error: 'Instagram post not accessible via oEmbed',\n      success: false\n    }\n  }];\n}\n\nconst metadata = {\n  platform: 'instagram',\n  title: response.title || 'Instagram Post',\n  authorName: response.author_name,\n  authorUrl: response.author_url,\n  thumbnailUrl: response.thumbnail_url,\n  width: response.width,\n  height: response.height,\n  html: response.html,\n  version: response.version,\n  type: response.type,\n  // VDP metadata extensions\n  vdp: {\n    extractedAt: new Date().toISOString(),\n    source: 'instagram_oembed',\n    confidence: 0.7, // Lower confidence due to limited data\n    embedEligible: true,\n    limitations: 'oEmbed provides limited metadata - Graph API recommended for full stats'\n  }\n};\n\nreturn [{\n  json: {\n    success: true,\n    metadata,\n    // Ready for T4 consumption\n    'x-goog-meta-vdp-platform': 'instagram',\n    'x-goog-meta-vdp-author': response.author_name,\n    'x-goog-meta-vdp-type': response.type\n  }\n}];"
      },
      "id": "transform-oembed",
      "name": "Transform oEmbed Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "functionCode": "// Merge both paths - prioritize Graph API if available\nconst item = items[0].json;\n\nif (item.fallbackToOEmbed) {\n  // Redirect to oEmbed path\n  return [{\n    json: {\n      url: item.url,\n      useOEmbed: true\n    }\n  }];\n}\n\nreturn [{ json: item }];"
      },
      "id": "merge-responses",
      "name": "Merge API Responses",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "respond-with-metadata",
      "name": "Respond with Metadata",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 300]
    }
  ],
  "connections": {
    "Instagram Metadata Request": {
      "main": [
        [
          {
            "node": "Check Instagram URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Instagram URL": {
      "main": [
        [
          {
            "node": "Route by Token Availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Token Availability": {
      "main": [
        [
          {
            "node": "Instagram oEmbed Call",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Graph API (Token Required)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instagram oEmbed Call": {
      "main": [
        [
          {
            "node": "Transform oEmbed Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Graph API (Token Required)": {
      "main": [
        [
          {
            "node": "Merge API Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform oEmbed Response": {
      "main": [
        [
          {
            "node": "Respond with Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge API Responses": {
      "main": [
        [
          {
            "node": "Respond with Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1"
}