# 📨 Cursor - 범용 재귀개선 대시보드 구현

**Priority**: CRITICAL  
**Action**: Universal-Dashboard-Implementation  
**Correlation-ID**: CURSOR-UNIVERSAL-DASH-001  
**Timeline**: T+0~15분 병렬 실행

---

## 🎯 **Cursor UI Terminal 명령어 (즉시 실행)**

### **Phase 1: SummaryDock 범용 대시보드 확장**
```typescript
// src/components/universal/UniversalSystemStatus.tsx 생성
interface UniversalSystemStatus {
  context: 'frontend' | 'backend' | 'devops' | 'security' | 'performance' | 'architecture';
  consensus_score: number;  // 0.0-1.0
  quality_gates: {
    slo: boolean;
    circuit_breaker: boolean;
    dora_metrics: boolean;
    code_quality: boolean;
    security: boolean;
    ux: boolean;
  };
  active_agents: string[];
  current_experiment: 'A' | 'B';
  recommendations: string[];
  last_updated: string;
}
```

### **Phase 1: 실시간 상태 표시 컴포넌트**
```bash
cd /Users/ted/snap3

# 1. 범용 시스템 상태 컴포넌트 생성
mkdir -p src/components/universal

# 2. UniversalSystemStatus 컴포넌트
cat > src/components/universal/UniversalSystemStatus.tsx <<'TYPESCRIPT'
'use client';

import { useState, useEffect } from 'react';
import { AlertCircle, CheckCircle, Activity, Zap, Shield, Code } from 'lucide-react';

interface UniversalSystemStatus {
  context: string;
  consensus_score: number;
  quality_gates: {
    slo: boolean;
    circuit_breaker: boolean;
    dora_metrics: boolean;
  };
  active_agents: string[];
  current_experiment: 'A' | 'B';
  recommendations: string[];
}

export default function UniversalSystemStatus() {
  const [status, setStatus] = useState<UniversalSystemStatus | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchStatus = async () => {
      try {
        const response = await fetch('/api/universal/status');
        const data = await response.json();
        setStatus(data);
      } catch (error) {
        console.error('Universal status fetch error:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchStatus();
    const interval = setInterval(fetchStatus, 5000); // 5초 간격 업데이트
    return () => clearInterval(interval);
  }, []);

  if (loading) return <div className="animate-pulse bg-gray-200 h-32 rounded-lg" />;
  if (!status) return null;

  const getConsensusColor = (score: number) => {
    if (score >= 0.8) return 'text-green-600 bg-green-50 border-green-200';
    if (score >= 0.6) return 'text-amber-600 bg-amber-50 border-amber-200';
    return 'text-red-600 bg-red-50 border-red-200';
  };

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold text-gray-900">범용 재귀개선 시스템</h3>
        <div className="flex items-center space-x-2">
          <Activity className="w-4 h-4 text-blue-600" />
          <span className="text-sm text-gray-600">실험 그룹: {status.current_experiment}</span>
        </div>
      </div>

      {/* 합의 점수 */}
      <div className={`mb-4 p-3 rounded-lg border ${getConsensusColor(status.consensus_score)}`}>
        <div className="flex items-center justify-between">
          <span className="font-medium">합의 점수</span>
          <span className="text-xl font-bold">{(status.consensus_score * 100).toFixed(0)}%</span>
        </div>
      </div>

      {/* 품질 게이트 상태 */}
      <div className="grid grid-cols-3 gap-2 mb-4">
        {Object.entries(status.quality_gates).map(([gate, passed]) => (
          <div key={gate} className="flex items-center space-x-2">
            {passed ? (
              <CheckCircle className="w-4 h-4 text-green-600" />
            ) : (
              <AlertCircle className="w-4 h-4 text-red-600" />
            )}
            <span className="text-xs text-gray-700">{gate}</span>
          </div>
        ))}
      </div>

      {/* 활성 에이전트 */}
      <div className="mb-4">
        <span className="text-sm font-medium text-gray-700">활성 에이전트:</span>
        <div className="flex flex-wrap gap-1 mt-1">
          {status.active_agents.map((agent) => (
            <span key={agent} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
              {agent}
            </span>
          ))}
        </div>
      </div>

      {/* 권장사항 */}
      {status.recommendations.length > 0 && (
        <div className="text-xs text-gray-600">
          <span className="font-medium">권장:</span>
          <ul className="mt-1 space-y-1">
            {status.recommendations.map((rec, idx) => (
              <li key={idx}>• {rec}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}
TYPESCRIPT

# 3. Universal Status API 엔드포인트 생성
mkdir -p src/app/api/universal

cat > src/app/api/universal/status/route.ts <<'TYPESCRIPT'
import { NextResponse } from 'next/server';

export async function GET() {
  try {
    // Circuit Breaker 상태 수집
    const cbResponse = await fetch('http://localhost:8080/api/circuit-breaker/status').catch(() => null);
    const cbData = cbResponse ? await cbResponse.json() : null;

    // 실험 설정 로드
    const experiment = { current_experiment: 'A' }; // configs/experiments.yaml에서 로드 예정

    const universalStatus = {
      context: 'ingester_ui',
      consensus_score: 0.85, // 임시 값, 실제로는 계산 로직 필요
      quality_gates: {
        slo: cbData?.performance_metrics?.success_rate === '100.00%',
        circuit_breaker: cbData?.state?.state === 'CLOSED',
        dora_metrics: true // 임시 값
      },
      active_agents: ['ClaudeCode', 'Cursor', 'T1', 'T3'],
      current_experiment: experiment.current_experiment,
      recommendations: [
        '현재 모든 시스템이 안정 상태입니다',
        'P95 응답시간이 임계값 대비 93% 향상됨'
      ],
      last_updated: new Date().toISOString()
    };

    return NextResponse.json(universalStatus);
  } catch (error) {
    return NextResponse.json({
      error: 'Universal status fetch failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}
TYPESCRIPT

# 4. 메인 페이지에 대시보드 통합 준비
echo "✅ [Cursor] UniversalSystemStatus 컴포넌트 생성 완료"
echo "📊 [Cursor] API 엔드포인트 /api/universal/status 생성 완료"
```

### **Phase 1 완료 신호**
```bash
# Cursor 범용 대시보드 준비 완료
touch .cursor-universal-ready
echo "CURSOR-UNIVERSAL-DASHBOARD-COMPLETE-$(date +%s)" > .cursor-universal-ready

# 파일 구조 확인
echo "📁 [Cursor] 생성된 파일:"
ls -la src/components/universal/
ls -la src/app/api/universal/status/
```

---

**Cursor 실행 명령어**: `cd /Users/ted/snap3 && cat .collab-msg-cursor-universal-dashboard`