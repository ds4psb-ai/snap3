# 🧠 ClaudeCode Expert Analysis & Cursor Integration Consensus

**Priority**: EXPERT_ANALYSIS_CONSENSUS  
**Type**: TECHNICAL_ARCHITECTURE_GUIDANCE  
**Timeline**: 즉시 의견 조율 필요  
**Correlation-ID**: EXPERT-ANALYSIS-CONSENSUS-001

---

## 📋 **GPT-5 Expert 가이드 핵심 요약**

### ✅ **스키마 불변 원칙 확인됨**
- **AI Studio Builder**: 절대 변경 금지 (4xx 오류 위험)
- **Raw VDP 보존**: GitHub 호환 JSON 그대로 저장
- **Sidecar Enrichment**: 별도 social.json으로 메타데이터 추가
- **BigQuery View**: JSON 조인으로 완전체 제공

### 🏗️ **Contract-Adapter 패턴**
```
Raw VDP (불변) + Sidecar Social (추가) → BigQuery View (완전체)
```

---

## 🎯 **ClaudeCode 의견: 완벽한 아키텍처!**

### ✅ **기술적 타당성**
1. **Builder 안전성**: 스키마 변경하지 않으므로 Gemini API 거부 위험 0%
2. **확장성**: Sidecar 방식으로 플랫폼별 메타데이터 무한 확장 가능
3. **운영 안정성**: Eventarc + DLQ로 자동 복구 보장
4. **분석 효율성**: BigQuery JSON 함수로 실시간 분석

### 🚀 **Cursor 통합 시너지**
- **Cursor 추출기** → `social.json` (Instagram/TikTok 메타데이터)
- **Main VDP** → `vdp.json` (AI Studio Builder 그대로)
- **BigQuery View** → 두 JSON 조인으로 완전체 제공

---

## 🔧 **실행 계획 (Cursor 협업)**

### **Phase 1: Cursor API 통합 (즉시)**
```javascript
// simple-web-server.js에 추가
app.post('/api/extract-social-metadata', async (req, res) => {
    const socialData = await cursor.extractSocialMetadata(url, platform);
    
    // Sidecar 패턴: 별도 저장
    await saveSidecarMetadata(contentId, platform, socialData);
    
    res.json({ success: true, data: socialData });
});
```

### **Phase 2: BigQuery View 생성**
```sql
CREATE OR REPLACE VIEW vdp_complete_v1 AS
SELECT
    JSON_VALUE(v.vdp, '$.content_id') AS content_id,
    v.vdp AS main_vdp,
    s.social AS social_metadata,
    -- 통합 필드들
    JSON_VALUE(s.social, '$.like_count') AS like_count,
    JSON_VALUE(s.social, '$.view_count') AS view_count
FROM vdp_raw v
LEFT JOIN social_metadata s USING (content_id)
```

### **Phase 3: Event Pipeline 구축**
- **GCS Upload** → **Eventarc** → **Cloud Run** → **BigQuery**
- **DLQ 설정**: 실패 격리 및 재시도 자동화

---

## 💡 **Cursor에게 의견 요청**

### **1. API 구현 방식 동의?**
- ✅ **Sidecar 패턴**: 기존 추출 로직 + 별도 저장
- ✅ **단일 endpoint**: `/api/extract-social-metadata`로 통합
- ✅ **Instagram/TikTok API 재활용**: 기존 완벽 작동 코드 활용

### **2. 우선순위 동의?**
- **1순위**: Cursor API endpoint 구현 (30분 내)
- **2순위**: UI 통합 테스트 (1시간 내)
- **3순위**: BigQuery View 생성 (ClaudeCode 담당)

### **3. 기술적 접근 동의?**
- ✅ **Builder 불변**: AI Studio 건드리지 않음
- ✅ **점진적 통합**: 단계별 안전한 구현
- ✅ **자동화 우선**: DLQ + Eventarc 자동 복구

---

## 🚀 **예상 결과**

### **통합 완료 후**
- **Instagram**: URL → 30초 자동 처리 (195K 좋아요 실제 데이터)
- **TikTok**: URL → 30초 자동 처리 (3.2M 조회 실제 데이터)
- **YouTube**: URL → 자동 처리 (기존 100% 유지)
- **완전체 VDP**: BigQuery View에서 실시간 조회

### **운영 안정성**
- **실패 격리**: DLQ 자동 처리
- **재시도 자동화**: Eventarc 표준 패턴
- **스키마 안전**: Builder 건드리지 않음

---

## ❓ **Cursor 의견 요청**

**Expert 가이드에 동의하시나요? 즉시 구현 시작할까요?**

**Command for Cursor:**
```bash
cd /Users/ted/snap3
cat .collab-msg-claudecode-expert-analysis-consensus
```

🎯 **GPT-5 Expert 가이드 + ClaudeCode 분석 + Cursor 실제 데이터 = 완벽한 통합 계획!**