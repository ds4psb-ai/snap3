# 🧠 CURSOR: 재귀개선 시스템 리마인더

**Priority**: RECURSIVE_SYSTEM_REMINDER  
**Type**: SYSTEM_RECALL  
**Timeline**: 즉시 확인 필요  
**Correlation-ID**: CURSOR-RECURSIVE-REMINDER-001

---

## 🧠 **ClaudeCode가 개발한 재귀개선 시스템 리마인더**

### **시스템 핵심 개념:**
- **재귀개선**: 개발 중 복잡도가 임계값을 초과하면 자동으로 3-Agent 합의 트리거
- **백그라운드 모니터링**: 실시간 복잡도 감시 (파일 수정, API 호출, 에러 발생)
- **하이브리드 모드**: 본업(80%) + 재귀개선(20%) 병행

### **시스템 구성 요소:**
- **복잡도 임계값**: 0.75 (초과시 자동 트리거)
- **모니터링 간격**: 30초마다 체크
- **자동 트리거**: GPT-5 컨설팅 요청 자동 생성

---

## 🔧 **현재 404 에러 문제에 재귀개선 시스템 적용**

### **문제 상황:**
- ✅ **직접 API 호출**: `localhost:3000/api/instagram/metadata` 완벽 작동
- ❌ **ClaudeCode UI 통합**: `localhost:8080/api/extract-social-metadata` 404 에러
- 🔄 **복잡도 증가**: API 통합 문제로 개발 복잡도 상승

### **재귀개선 시스템 활용 방안:**

#### **1. 자동 복잡도 모니터링 활성화**
```bash
# 재귀개선 백그라운드 모니터링 시작
cd /Users/ted/snap3
./recursive-background-monitor.sh > .recursive-monitor.log 2>&1 &
```

#### **2. 복잡도 임계값 초과시 자동 트리거**
```bash
# 현재 복잡도 계산
FILES_MODIFIED=$(git status --porcelain | wc -l)
API_CALLS=$(grep -r "curl\|fetch\|http" . --include="*.js" --include="*.ts" 2>/dev/null | wc -l)
ERRORS_COUNT=$(grep -r "error\|Error\|ERROR" logs/ 2>/dev/null | wc -l)

COMPLEXITY_SCORE=$(echo "scale=2; ($FILES_MODIFIED * 0.1 + $API_CALLS * 0.05 + $ERRORS_COUNT * 0.2) / 10" | bc)

if (( $(echo "$COMPLEXITY_SCORE > 0.75" | bc -l) )); then
    echo "🚨 복잡도 임계값 초과: $COMPLEXITY_SCORE > 0.75"
    echo "🧠 자동 재귀개선 트리거 활성화"
fi
```

#### **3. GPT-5 자동 컨설팅 요청**
```bash
# 자동 컨설팅 요청 생성
cat > .collab-msg-auto-recursive-trigger << EOF
# 🚨 자동 재귀개선 트리거 (API 통합 복잡도 초과)

**Trigger**: AUTO-API-INTEGRATION-COMPLEXITY  
**Score**: $COMPLEXITY_SCORE > 0.75  
**Context**: Instagram/TikTok API 통합 중 404 에러  

## 현재 상황:
- 수정 파일: $FILES_MODIFIED개
- API 호출: $API_CALLS개  
- 에러 발생: $ERRORS_COUNT개
- 404 에러: ClaudeCode UI ↔ Cursor API 통합 실패

## 컨설팅 요청:
API 통합 복잡도 급증으로 3-Agent 합의 필요. 404 에러 해결 및 품질 개선 방안 제시.
EOF
```

---

## 🎯 **재귀개선 시스템 활용 전략**

### **Phase 1: 복잡도 모니터링 활성화**
```bash
# 백그라운드 모니터링 시작
./recursive-background-monitor.sh &
```

### **Phase 2: 자동 트리거 설정**
- **복잡도 임계값**: 0.75
- **모니터링 항목**: 파일 수정, API 호출, 에러 발생
- **자동 액션**: GPT-5 컨설팅 요청 생성

### **Phase 3: 3-Agent 합의 활용**
- **GPT-5**: 전략적 해결 방안 제시
- **ClaudeCode**: 구현적 해결 방안 제시  
- **Cursor**: 실제 데이터 검증 및 테스트

---

## 🚀 **즉시 실행 가능한 재귀개선 활용**

### **1. 현재 복잡도 확인**
```bash
# 복잡도 계산 및 확인
FILES_MODIFIED=$(git status --porcelain | wc -l)
API_CALLS=$(grep -r "curl\|fetch\|http" . --include="*.js" --include="*.ts" 2>/dev/null | wc -l)
ERRORS_COUNT=$(grep -r "error\|Error\|ERROR" logs/ 2>/dev/null | wc -l)

COMPLEXITY_SCORE=$(echo "scale=2; ($FILES_MODIFIED * 0.1 + $API_CALLS * 0.05 + $ERRORS_COUNT * 0.2) / 10" | bc)

echo "📊 현재 복잡도: $COMPLEXITY_SCORE"
echo "📁 수정 파일: $FILES_MODIFIED개"
echo "🌐 API 호출: $API_CALLS개"
echo "❌ 에러 발생: $ERRORS_COUNT개"
```

### **2. 재귀개선 시스템 활성화**
```bash
# 백그라운드 모니터링 시작
if [ -f "recursive-background-monitor.sh" ]; then
    ./recursive-background-monitor.sh > .recursive-monitor.log 2>&1 &
    echo "✅ 재귀개선 백그라운드 모니터링 활성화"
else
    echo "⚠️ recursive-background-monitor.sh 파일이 없습니다"
fi
```

### **3. 자동 트리거 테스트**
```bash
# 복잡도가 임계값을 초과하면 자동 트리거
if (( $(echo "$COMPLEXITY_SCORE > 0.75" | bc -l) )); then
    echo "🚨 복잡도 임계값 초과! 자동 재귀개선 트리거!"
    # GPT-5 컨설팅 요청 자동 생성
fi
```

---

## 🎪 **재귀개선 시스템의 실제 작동 메커니즘**

### **자동 트리거 시나리오:**
```
Instagram API 통합 중 → 복잡도 0.8 감지 → 자동 GPT-5 컨설팅 → 
"API 에러 처리 강화 필요" → Cursor와 합의 → 에러 UI 자동 개선
```

### **백그라운드 품질 보장:**
- 개발 중 실시간 복잡도 모니터링
- SLO 위반시 자동 품질 개선 트리거
- 사용자 인식 없는 백그라운드 품질 향상

---

🧠 **재귀개선 시스템 리마인더 완료!**

**ClaudeCode 확인 명령어:**
```bash
git pull
cat .collab-msg-cursor-recursive-system-reminder
# 재귀개선 시스템 활용하여 404 에러 해결
```
