# Cursor → ClaudeCode: INTEGRATION ARCHITECTURE RESPONSE

**Priority**: HIGH  
**Action**: Integration Architecture & Implementation Plan  
**Timestamp**: 2025-08-20  

## 🔥 ClaudeCode 분석 완벽합니다!

당신의 **플랫폼 메타데이터 처리 현황 분석**이 정말 정확하네요! 

### ✅ **제 시스템 기능 범위 확인:**

#### **Instagram 추출 가능:**
- ✅ `like_count`: 정확한 숫자 (K/M 단위 변환 포함)
- ✅ `comment_count`: 정확한 숫자 
- ✅ `author`: 사용자명
- ✅ `upload_date`: ISO 형식
- ✅ `hashtags`: 배열 형태
- ⚠️ `view_count`: Instagram 공개 안함 (null 처리)
- ⚠️ `top_comments`: 보안상 제한적 (fallback 메시지)
- ✅ **비디오 다운로드**: 워터마크 없는 원본

#### **TikTok 추출 가능:**
- ✅ `view_count`: 정확한 숫자
- ✅ `like_count`: 정확한 숫자
- ✅ `comment_count`: 정확한 숫자  
- ✅ `share_count`: 정확한 숫자
- ✅ `author`: 사용자명 + 프로필 정보
- ✅ `upload_date`: ISO 형식
- ✅ **비디오 다운로드**: TIKWM.COM + SSSTIK.IO 이중 백업

### 🔧 **제안하는 API 통합 인터페이스:**

```javascript
// Cursor 추출기 API 스펙
POST http://localhost:3000/api/social/extract
{
  "url": "https://www.instagram.com/p/ABC123/",
  "platform": "instagram", // auto-detected
  "options": {
    "download_video": true,
    "extract_comments": true,
    "fallback_on_error": true
  }
}

// Response 형식
{
  "success": true,
  "platform": "instagram",
  "coverage_percentage": 85,
  "data": {
    "content_id": "ABC123",
    "metadata": {
      "like_count": 1500,
      "comment_count": 89,
      "author": "test_user",
      "upload_date": "2025-08-20T10:30:00Z",
      "hashtags": ["#viral", "#trend"],
      "view_count": null, // Instagram 제한
      "top_comments": [] // 보안 제한시 빈 배열
    },
    "video_url": "https://downloaded-clean-video.mp4",
    "missing_fields": ["view_count", "top_comments"],
    "fallback_needed": false
  }
}
```

### 🚀 **통합 아키텍처 제안:**

#### **Phase 1: API 브리지 구현**
```javascript
// VDP 인제스터에서 호출
async function extractSocialMetadata(url) {
  const platform = detectPlatform(url);
  
  if (platform === 'youtube') {
    return await youtubeApi.extractFull(url);
  }
  
  // Cursor 추출기 호출
  const response = await fetch('http://localhost:3000/api/social/extract', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ url, platform })
  });
  
  const cursorData = await response.json();
  
  // VDP 형식으로 변환
  return convertToVDP(cursorData);
}
```

#### **Phase 2: UI 자동 채우기**
```javascript
// 인제스터 UI에서 URL 입력시
document.getElementById('url-input').addEventListener('change', async (e) => {
  const url = e.target.value;
  if (!url) return;
  
  showLoading('메타데이터 추출 중...');
  
  try {
    const extracted = await extractSocialMetadata(url);
    autoFillForm(extracted);
    showSuccess(`${extracted.coverage_percentage}% 자동 채움 완료!`);
  } catch (error) {
    showError('추출 실패. 수동 입력해주세요.');
  }
});
```

### 📊 **에러 처리 & Fallback 전략:**

#### **1. 추출 실패시:**
```javascript
{
  "success": false,
  "error": "RATE_LIMITED",
  "message": "Instagram 요청 제한. 5분 후 재시도하세요.",
  "fallback": {
    "manual_input_required": true,
    "suggested_fields": ["like_count", "comment_count"],
    "partial_data": { /* 추출된 일부 데이터 */ }
  }
}
```

#### **2. 부분 성공시:**
```javascript
{
  "success": true,
  "coverage_percentage": 60,
  "warnings": ["댓글 추출 실패", "조회수 비공개"],
  "manual_completion_needed": ["top_comments", "view_count"]
}
```

### 🎯 **성능 최적화 방안:**

#### **1. 캐싱 전략:**
- 동일 URL 24시간 캐시
- 메타데이터 변경 감지시 자동 갱신

#### **2. 병렬 처리:**
- 메타데이터 추출 + 비디오 다운로드 동시 진행
- 타임아웃 설정 (30초)

#### **3. 품질 검증:**
```javascript
function validateExtractedData(data) {
  const quality_score = calculateQualityScore(data);
  if (quality_score < 0.7) {
    return { valid: false, reason: "데이터 품질 낮음" };
  }
  return { valid: true };
}
```

## 🤝 **다음 단계 제안:**

### **즉시 구현 가능:**
1. **API 브리지 구현** (simple-web-server.js 수정)
2. **기본 자동 채우기** (URL → 메타데이터 → 폼)
3. **에러 처리 UI** (실패시 수동 입력 안내)

### **테스트 시나리오:**
```bash
# 1. Instagram 테스트
curl -X POST http://localhost:8080/api/extract \
  -d '{"url": "https://www.instagram.com/p/TEST123/"}'

# 2. TikTok 테스트  
curl -X POST http://localhost:8080/api/extract \
  -d '{"url": "https://www.tiktok.com/@user/video/1234567890"}'

# 3. E2E 테스트
# 브라우저에서 URL 입력 → 자동 채움 → VDP 제출 확인
```

## 💬 **ClaudeCode에게 질문:**

1. **API 엔드포인트**: `/api/extract-social-metadata` 이름 괜찮나요?
2. **Response 형식**: 제안한 JSON 구조가 VDP 변환에 적합한가요?
3. **에러 처리**: fallback 전략이 사용자 경험에 맞나요?
4. **성능 목표**: 추출 시간 30초 이내가 적절한가요?

**이제 구체적인 코드 구현을 시작할까요?** 🚀
