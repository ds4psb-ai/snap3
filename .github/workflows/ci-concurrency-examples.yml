# GitHub Actions Concurrency 설정 예제들

# 옵션 1: 현재 설정 (이미 적용됨) ✅
# PR과 브랜치를 구분해서 처리
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# 옵션 2: 단순 브랜치 기준 (요청하신 방식)
# 같은 브랜치의 모든 실행을 하나로 묶음
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

# 옵션 3: 워크플로우 + 브랜치 조합 (추천)
# 다른 워크플로우와 충돌 방지
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 옵션 4: PR 전용 설정
# PR일 때만 concurrency 적용
concurrency:
  group: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.pull_request.number) || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

# 옵션 5: 환경별 분리
# production은 취소하지 않음
concurrency:
  group: ${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# 옵션 6: Job 레벨 concurrency
# 특정 job만 concurrency 적용
jobs:
  deploy:
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: false  # 배포는 취소 안 함
    steps:
      - run: echo "Deploying..."

  test:
    concurrency:
      group: test-${{ github.ref }}
      cancel-in-progress: true  # 테스트는 취소 가능
    steps:
      - run: npm test

# 옵션 7: 다중 워크플로우 간 조정
# 여러 워크플로우가 같은 리소스 사용할 때
concurrency:
  group: shared-resource-${{ github.ref }}
  cancel-in-progress: true

# 옵션 8: 매트릭스 빌드 최적화
# 매트릭스별로 별도 그룹
strategy:
  matrix:
    node: [18, 20]
concurrency:
  group: ${{ github.ref }}-node-${{ matrix.node }}
  cancel-in-progress: true