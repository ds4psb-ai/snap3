# 🤝 Cursor-ClaudeCode Git 협업 표준 (v1.0)

## 📋 **표준화된 협업 프로토콜**

### **Cursor 메시지 전송**
```bash
echo "내용" > .collab-msg-cursor-[작업명]
git add . && git commit -m "Cursor: 메시지" && git push
```

### **ClaudeCode 메시지 확인** (사용자 알림 필요)
```bash
git pull
cat .collab-msg-cursor-[최신파일]
```

### **ClaudeCode 응답**
```bash
echo "응답" > .collab-msg-claudecode-[응답명]
git add . && git commit -m "ClaudeCode: 응답" && git push
```

## 🎯 **핵심 원칙**

### **완전 무료 시스템**
- ✅ Git 기반 - 0원 비용
- ✅ API 키 불필요
- ✅ Cloud Run 불필요
- ✅ 복잡한 설정 없음

### **사용자 역할**
- **중재자**: "새 메시지 확인해" 알림 제공
- **전달자**: GPT-5 Pro 컨설팅 답변 전달
- **모니터**: 협업 진행 상황 관리

### **자동화 범위**
- **Git 작업**: 완전 자동화
- **메시지 감지**: 사용자 알림 필요
- **GPT-5 컨설팅**: 사용자 중재

## 🔄 **워크플로우**

### **일반 협업**
```
1. Cursor 작업 완료 → Git 메시지 전송
2. 사용자: "클로드코드, 새 메시지 확인해"
3. ClaudeCode: git pull → 메시지 확인 → 작업 실행
4. ClaudeCode: 결과 메시지 → Git 전송
5. 사용자: "커서, 클로드코드 답변 확인해"
6. 반복...
```

### **막힐 때 GPT-5 Pro 컨설팅**
```
1. 문제 발생
2. 둘 중 한 명이 컨설팅 요청 메시지 생성
3. 사용자: GPT-5 Pro에게 복사 → 답변 받기
4. 사용자: 답변을 아무에게나 전달
5. 받은 쪽에서 상대방에게 전달 → 협업 재개
```

## 📁 **파일 명명 규칙**

### **메시지 파일**
```
.collab-msg-cursor-[작업명]-[타임스탬프]
.collab-msg-claudecode-[작업명]-[타임스탬프]
```

### **컨설팅 요청**
```
.collab-msg-gpt5-consulting-[문제영역]-[요청자]
```

### **컨설팅 응답 전달**
```
.collab-msg-gpt5-response-[수신자]-[타임스탬프]
```

## 🚀 **협업 효율성**

### **기존 Cloud Run 방식**
- ❌ API 키 필요
- ❌ 서버 비용 발생
- ❌ 복잡한 설정
- ❌ 장애 가능성

### **Git 표준 방식**
- ✅ 무료
- ✅ 단순함
- ✅ 신뢰성
- ✅ 히스토리 보존
- ✅ 백업 자동화

## 💬 **현재 상태**

**협업 프로토콜**: 확립 완료 ✅
**다음 단계**: VDP 완성 작업 진행
**대기 상태**: Cursor의 새 메시지 또는 작업 지시

---

**🤖 ClaudeCode 표준 협업 시스템 수립 완료 (2025-08-21 21:44)**