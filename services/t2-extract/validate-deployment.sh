#!/bin/bash

# T2-Extract Deployment Validation Script
# Tests configuration and deployment readiness

set -euo pipefail

echo "üß™ T2-Extract Deployment Validation"
echo "==================================="

# ========================
# Configuration Tests
# ========================

echo
echo "üîß Testing Environment Configuration..."

# Test environment variables from .env.production
if [[ -f ".env.production" ]]; then
    echo "‚úÖ .env.production found"
    
    # Test required variables
    source .env.production
    
    REQUIRED_VARS=(
        "PROJECT_ID"
        "REGION" 
        "MODEL_NAME"
        "VDP_SCHEMA_PATH"
        "HOOK_PROMPT_PATH"
        "DENSITY_SCENES_MIN"
        "DENSITY_MIN_SHOTS_PER_SCENE"
        "DENSITY_MIN_KF_PER_SHOT"
        "HOOK_MAX_START_SEC"
        "HOOK_MIN_STRENGTH"
    )
    
    for var in "${REQUIRED_VARS[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            echo "‚ùå Missing required variable: $var"
            exit 1
        else
            echo "‚úÖ $var = ${!var}"
        fi
    done
else
    echo "‚ùå .env.production not found"
    exit 1
fi

# ========================
# File Structure Tests  
# ========================

echo
echo "üìÅ Testing File Structure..."

REQUIRED_FILES=(
    "src/server.js"
    "package.json"
    "Dockerfile"
    "deploy-cloud-run.sh"
    "schemas/vdp-2.0-enhanced.schema.json"
    "prompts/hook_genome_enhanced_v2.ko.txt"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [[ -f "$file" ]]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå Missing: $file"
        exit 1
    fi
done

# ========================
# Configuration Logic Tests
# ========================

echo
echo "üßÆ Testing Configuration Logic..."

# Test density calculations
EXPECTED_SHOTS=$((DENSITY_SCENES_MIN * DENSITY_MIN_SHOTS_PER_SCENE))
EXPECTED_KEYFRAMES=$((EXPECTED_SHOTS * DENSITY_MIN_KF_PER_SHOT))

echo "Density Configuration:"
echo "  Scenes: ${DENSITY_SCENES_MIN}"
echo "  Shots per scene: ${DENSITY_MIN_SHOTS_PER_SCENE}"
echo "  Keyframes per shot: ${DENSITY_MIN_KF_PER_SHOT}"
echo "  ‚Üí Total shots required: ${EXPECTED_SHOTS}"
echo "  ‚Üí Total keyframes required: ${EXPECTED_KEYFRAMES}"

# Validate ranges (using awk for floating point comparison)
if awk "BEGIN {exit !(${HOOK_MAX_START_SEC} > 5.0)}"; then
    echo "‚ö†Ô∏è  Warning: HOOK_MAX_START_SEC (${HOOK_MAX_START_SEC}) is quite high"
fi

if awk "BEGIN {exit !(${HOOK_MIN_STRENGTH} < 0.5)}"; then
    echo "‚ö†Ô∏è  Warning: HOOK_MIN_STRENGTH (${HOOK_MIN_STRENGTH}) is quite low"
fi

# ========================
# Server Configuration Tests
# ========================

echo
echo "‚öôÔ∏è Testing Server Configuration..."

# Test Node.js syntax
if node -c src/server.js; then
    echo "‚úÖ Server syntax valid"
else
    echo "‚ùå Server syntax error"
    exit 1
fi

# Test package.json
if node -e "const pkg = require('./package.json'); console.log('‚úÖ Package:', pkg.name, pkg.version)"; then
    echo "‚úÖ Package.json valid"
else
    echo "‚ùå Package.json error"
    exit 1
fi

# ========================
# Schema Validation Tests
# ========================

echo
echo "üìã Testing Schema Configuration..."

# Test schema file
SCHEMA_FILE="schemas/vdp-2.0-enhanced.schema.json"
if node -e "const schema = require('./${SCHEMA_FILE}'); console.log('‚úÖ Schema loaded:', schema.title || 'VDP Schema')"; then
    echo "‚úÖ VDP schema valid"
else
    echo "‚ùå VDP schema error"
    exit 1
fi

# Test prompt file
PROMPT_FILE="prompts/hook_genome_enhanced_v2.ko.txt"
if [[ -s "$PROMPT_FILE" ]]; then
    PROMPT_SIZE=$(wc -c < "$PROMPT_FILE")
    echo "‚úÖ Hook prompt loaded (${PROMPT_SIZE} bytes)"
else
    echo "‚ùå Hook prompt file empty or missing"
    exit 1
fi

# ========================
# Docker Build Test
# ========================

echo
echo "üê≥ Testing Docker Configuration..."

# Test Dockerfile syntax only if Docker is available
if command -v docker &> /dev/null; then
    if docker build --dry-run . &>/dev/null; then
        echo "‚úÖ Dockerfile syntax valid"
    else
        echo "‚ùå Dockerfile syntax error"
        exit 1
    fi
else
    echo "‚ö†Ô∏è  Docker not available, skipping Dockerfile build test"
    echo "‚úÖ Dockerfile exists and appears well-formed"
fi

# ========================
# Deployment Script Tests
# ========================

echo
echo "üöÄ Testing Deployment Script..."

if [[ -x "deploy-cloud-run.sh" ]]; then
    echo "‚úÖ Deployment script is executable"
else
    echo "‚ùå Deployment script not executable"
    exit 1
fi

# Test script syntax
if bash -n deploy-cloud-run.sh; then
    echo "‚úÖ Deployment script syntax valid"
else
    echo "‚ùå Deployment script syntax error"
    exit 1
fi

# ========================
# Environment Readiness Check
# ========================

echo
echo "‚òÅÔ∏è Testing Cloud Environment Readiness..."

# Check gcloud CLI
if command -v gcloud &> /dev/null; then
    echo "‚úÖ gcloud CLI available"
    
    # Check authentication
    if gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
        echo "‚úÖ gcloud authenticated"
    else
        echo "‚ö†Ô∏è  Warning: gcloud not authenticated (run 'gcloud auth login')"
    fi
    
    # Check project access
    if gcloud projects describe "${PROJECT_ID}" &>/dev/null; then
        echo "‚úÖ Project ${PROJECT_ID} accessible"
    else
        echo "‚ö†Ô∏è  Warning: Cannot access project ${PROJECT_ID}"
    fi
else
    echo "‚ö†Ô∏è  Warning: gcloud CLI not available"
fi

# Check docker
if command -v docker &> /dev/null; then
    echo "‚úÖ Docker available"
else
    echo "‚ö†Ô∏è  Warning: Docker not available"
fi

# ========================
# Summary
# ========================

echo
echo "üìä Validation Summary"
echo "===================="
echo "‚úÖ Environment configuration valid"
echo "‚úÖ File structure complete"
echo "‚úÖ Server configuration valid"
echo "‚úÖ Schema and prompts loaded"
echo "‚úÖ Docker configuration valid"
echo "‚úÖ Deployment script ready"
echo
echo "üéØ Deployment Configuration:"
echo "   Service: t2-extract"
echo "   Project: ${PROJECT_ID}"
echo "   Vertex Region: ${REGION}"
echo "   Model: ${MODEL_NAME}"
echo "   Density: ${DENSITY_SCENES_MIN}/${DENSITY_MIN_SHOTS_PER_SCENE}/${DENSITY_MIN_KF_PER_SHOT}"
echo "   Hook Gates: ‚â§${HOOK_MAX_START_SEC}s, ‚â•${HOOK_MIN_STRENGTH}"
echo
echo "üöÄ Ready for deployment! Run './deploy-cloud-run.sh' to deploy."