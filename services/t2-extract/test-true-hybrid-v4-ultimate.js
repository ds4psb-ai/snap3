#!/usr/bin/env node
/**
 * TRUE Hybrid VDP v4.0 ULTIMATE ÏµúÏ¢Ö ÌÖåÏä§Ìä∏
 * ÏôÑÏ†ÑÌïú Îç∞Ïù¥ÌÑ∞ ÌÜµÌï© + OLD VDP ÍπäÏù¥ + ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞± ÏôÑÏ†Ñ Î∞òÏòÅ
 */

import { TrueHybridUltimateVDPGenerator } from './src/true-hybrid-vdp-v4-ultimate.js';
import fs from 'fs';

// Ïã§Ï†ú ÌÖåÏä§Ìä∏ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞
const REAL_TEST_METADATA = {
    content_id: "6_I2FmT1mbY",
    platform: "YouTube Shorts",
    source_url: "https://www.youtube.com/shorts/6_I2FmT1mbY",
    view_count: 6530000,
    like_count: 110000,
    comment_count: 3354,
    share_count: 2000,
    upload_date: "2025-07-13T13:36:00.000Z",
    video_origin: "AI-Generated",
    hashtags: ["#hamster", "#office", "#relatable"],
    top_comments: `ÏßÄÎûÑÌïòÏßÄÎßàÎäî ÏßÑÏßú ÏèòÏö∏ Îã¥Í∏¥ ÎçîÎπôÏù∏Îç∞Ïö¨„Öã„Öã„Öã„Öã„Öã„Öã
ÏßÄÎûÑÌïòÏßÄÎßàÍ∞Ä ÏßÑÏßú ÏõÉÍ≤®Ïö¨„Öã„Öã„Öã„Öã„Öã„Öã„Ñ±„Öã
fuckenÌï¥„Öã„Öã„Öã„Öã„ÖãÎäî Î≠êÏïº„Öã„Öã„Öã
ÌñÑÏä§ÌÑ∞ Î™©ÏÜåÎ¶¨Í∞Ä ÎÑàÎ¨¥ Í∑ÄÏó¨ÏõåÏöî
ÏïºÍ∑º ÏÉÅÌô©Ïù¥ ÎÑàÎ¨¥ ÌòÑÏã§Ï†ÅÏù¥ÏóêÏöî`
};

class UltimateTester {
    constructor() {
        this.generator = new TrueHybridUltimateVDPGenerator();
    }

    /**
     * TRUE Hybrid VDP v4.0 ULTIMATE ÏÉùÏÑ± ÌÖåÏä§Ìä∏
     */
    async testUltimateGeneration() {
        console.log('üî• TRUE Hybrid VDP v4.0 ULTIMATE ÏÉùÏÑ± ÌÖåÏä§Ìä∏ ÏãúÏûë...\\n');
        
        const gcsUri = "gs://tough-variety-raw/raw/ingest/6_I2FmT1mbY.mp4";
        const estimatedDuration = 52;
        
        try {
            console.log(`üîÑ GCS URI: ${gcsUri}`);
            console.log(`‚è±Ô∏è ÏòÅÏÉÅ Í∏∏Ïù¥: ${estimatedDuration}Ï¥à\\n`);
            
            const result = await this.generator.generateVDP(
                gcsUri, 
                REAL_TEST_METADATA, 
                estimatedDuration
            );
            
            console.log('‚úÖ TRUE Hybrid VDP v4.0 ULTIMATE ÏÉùÏÑ± ÏÑ±Í≥µ!');
            console.log(`üìä Î™®Îìú: ${result.mode.mode}`);
            console.log(`üéØ Î™©Ìëú ÌÜ†ÌÅ∞: ${result.mode.target_tokens}`);
            console.log(`üìà Ïã§Ï†ú ÌÜ†ÌÅ∞: ${result.tokens_estimated}`);
            console.log(`üîç ÍπäÏù¥ ÌèâÍ∞Ä: ${result.validation.depth_assessment}`);
            console.log(`üîó Îç∞Ïù¥ÌÑ∞ ÌÜµÌï©: ${result.validation.data_integration}`);
            console.log(`üíØ Í≤ÄÏ¶ù Ï†êÏàò: ${result.validation.score}/100\\n`);
            
            // VDP Ï†ÄÏû•
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const outputPath = `./out/true-hybrid-v4-ultimate-${timestamp}.json`;
            fs.writeFileSync(outputPath, JSON.stringify(result.vdp, null, 2));
            console.log(`üíæ VDP Ï†ÄÏû•: ${outputPath}\\n`);
            
            return result.vdp;
            
        } catch (error) {
            console.error('‚ùå ULTIMATE ÌÖåÏä§Ìä∏ Ïã§Ìå®:', error.message);
            throw error;
        }
    }

    /**
     * Îç∞Ïù¥ÌÑ∞ ÌÜµÌï© Í≤ÄÏ¶ù (ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞± 1Î≤à Ìï¥Í≤∞)
     */
    validateDataIntegration(vdp) {
        console.log('üîó Îç∞Ïù¥ÌÑ∞ ÌÜµÌï© Í≤ÄÏ¶ù (ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞± Î∞òÏòÅ):');
        
        let score = 0;
        const maxScore = 100;
        
        // Hook GenomeÍ≥º Scene Ïó∞Í≤∞
        const hook = vdp.overall_analysis?.hookGenome;
        if (hook) {
            if (hook.connected_scene_id) {
                score += 25;
                console.log(`  ‚úÖ Hook-Scene Ïó∞Í≤∞: ${hook.connected_scene_id} (+25Ï†ê)`);
                
                // Ïó∞Í≤∞Îêú scene Ï°¥Ïû¨ ÌôïÏù∏
                const connectedScene = vdp.scenes?.find(s => s.scene_id === hook.connected_scene_id);
                if (connectedScene) {
                    score += 15;
                    console.log(`  ‚úÖ Ïó∞Í≤∞Îêú Scene Ï°¥Ïû¨ ÌôïÏù∏ (+15Ï†ê)`);
                    
                    // Hook connection Í∞ùÏ≤¥ ÌôïÏù∏
                    if (connectedScene.hook_connection) {
                        score += 20;
                        console.log(`  ‚úÖ SceneÏóê hook_connection Í∞ùÏ≤¥ Ï°¥Ïû¨ (+20Ï†ê)`);
                    }
                }
            } else {
                console.log(`  ‚ùå Hook-Scene Ïó∞Í≤∞ ÏóÜÏùå`);
            }
            
            // Hook ÌÜµÌï© Î∂ÑÏÑù
            if (hook.hook_integration_analysis && hook.hook_integration_analysis.length >= 150) {
                score += 25;
                console.log(`  ‚úÖ Hook ÌÜµÌï© Î∂ÑÏÑù Ï∂©Î∂Ñ (${hook.hook_integration_analysis.length} chars) (+25Ï†ê)`);
            } else {
                console.log(`  ‚ö†Ô∏è Hook ÌÜµÌï© Î∂ÑÏÑù Î∂ÄÏ°±`);
            }
            
            // ÌÉÄÏûÑÎùºÏù∏ ÏùºÏπò ÌôïÏù∏
            const hookStart = hook.start_sec;
            const connectedScene = vdp.scenes?.find(s => s.scene_id === hook.connected_scene_id);
            if (connectedScene && hookStart >= connectedScene.time_start && hookStart <= connectedScene.time_end) {
                score += 15;
                console.log(`  ‚úÖ Hook ÌÉÄÏûÑÎùºÏù∏-Scene ÏùºÏπò (${hookStart}s in ${connectedScene.time_start}-${connectedScene.time_end}s) (+15Ï†ê)`);
            }
        } else {
            console.log(`  ‚ùå Hook Genome ÏóÜÏùå`);
        }
        
        console.log(`\\n  üìä Îç∞Ïù¥ÌÑ∞ ÌÜµÌï© Ï†êÏàò: ${score}/${maxScore}\\n`);
        return { score, maxScore, isIntegrated: score >= 80 };
    }

    /**
     * Ïó∞Ï∂ú Î∂ÑÏÑù ÍπäÏù¥ Í≤ÄÏ¶ù (ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞± 2Î≤à Ìï¥Í≤∞)
     */
    validateCinematicDepth(vdp) {
        console.log('üé¨ Ïó∞Ï∂ú Î∂ÑÏÑù ÍπäÏù¥ Í≤ÄÏ¶ù (OLD VDP ÏàòÏ§Ä):');
        
        let score = 0;
        const maxScore = 100;
        let totalScenes = 0;
        let scenesWithDepth = 0;
        
        if (vdp.scenes) {
            vdp.scenes.forEach((scene, index) => {
                totalScenes++;
                let sceneScore = 0;
                
                // Cinematic properties ÍπäÏù¥
                if (scene.setting?.visual_style?.cinematic_properties) {
                    const cinematicLength = scene.setting.visual_style.cinematic_properties.length;
                    if (cinematicLength >= 300) {
                        sceneScore += 25;
                        console.log(`  ‚úÖ Scene ${index+1} cinematic analysis: ${cinematicLength} chars (+25Ï†ê)`);
                    } else if (cinematicLength >= 200) {
                        sceneScore += 15;
                        console.log(`  ‚ö†Ô∏è Scene ${index+1} cinematic analysis: ${cinematicLength} chars (+15Ï†ê)`);
                    } else {
                        console.log(`  ‚ùå Scene ${index+1} cinematic analysis Î∂ÄÏ°±: ${cinematicLength} chars`);
                    }
                }
                
                // Lighting analysis
                if (scene.setting?.visual_style?.lighting_analysis && 
                    scene.setting.visual_style.lighting_analysis.length >= 100) {
                    sceneScore += 15;
                    console.log(`  ‚úÖ Scene ${index+1} lighting analysis (+15Ï†ê)`);
                }
                
                // Color psychology
                if (scene.setting?.visual_style?.color_psychology && 
                    scene.setting.visual_style.color_psychology.length >= 80) {
                    sceneScore += 10;
                    console.log(`  ‚úÖ Scene ${index+1} color psychology (+10Ï†ê)`);
                }
                
                if (sceneScore >= 40) scenesWithDepth++;
                score += sceneScore;
            });
        }
        
        // ÌèâÍ∑†Ìôî
        if (totalScenes > 0) {
            score = Math.round(score / totalScenes);
        }
        
        console.log(`\\n  üìä Ïó∞Ï∂ú Î∂ÑÏÑù ÍπäÏù¥: ${score}/${maxScore} (${scenesWithDepth}/${totalScenes} scenes with depth)\\n`);
        return { score, maxScore, hasOldVdpDepth: score >= 80 };
    }

    /**
     * ÏÑúÏÇ¨ Î∂ÑÏÑù ÍπäÏù¥ Í≤ÄÏ¶ù (ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞± 3Î≤à Ìï¥Í≤∞)
     */
    validateNarrativeDepth(vdp) {
        console.log('üìñ ÏÑúÏÇ¨ Î∂ÑÏÑù ÍπäÏù¥ Í≤ÄÏ¶ù (OLD VDP ÏàòÏ§Ä):');
        
        let score = 0;
        const maxScore = 100;
        let totalScenes = 0;
        let scenesWithNarrativeDepth = 0;
        
        if (vdp.scenes) {
            vdp.scenes.forEach((scene, index) => {
                totalScenes++;
                let sceneScore = 0;
                
                // Comedic analysis ÍπäÏù¥
                if (scene.narrative_unit?.comedic_analysis) {
                    const comedicLength = scene.narrative_unit.comedic_analysis.length;
                    if (comedicLength >= 150) {
                        sceneScore += 25;
                        console.log(`  ‚úÖ Scene ${index+1} comedic analysis: ${comedicLength} chars (+25Ï†ê)`);
                    } else {
                        console.log(`  ‚ùå Scene ${index+1} comedic analysis Î∂ÄÏ°±: ${comedicLength} chars`);
                    }
                }
                
                // Rhetoric analysis ÍπäÏù¥
                if (scene.narrative_unit?.rhetoric_analysis) {
                    const rhetoricLength = scene.narrative_unit.rhetoric_analysis.length;
                    if (rhetoricLength >= 150) {
                        sceneScore += 25;
                        console.log(`  ‚úÖ Scene ${index+1} rhetoric analysis: ${rhetoricLength} chars (+25Ï†ê)`);
                    } else {
                        console.log(`  ‚ùå Scene ${index+1} rhetoric analysis Î∂ÄÏ°±: ${rhetoricLength} chars`);
                    }
                }
                
                // Comedic device Íµ¨Ï≤¥ÏÑ±
                if (scene.narrative_unit?.comedic_device && 
                    Array.isArray(scene.narrative_unit.comedic_device) &&
                    scene.narrative_unit.comedic_device.length > 0) {
                    sceneScore += 15;
                    console.log(`  ‚úÖ Scene ${index+1} comedic devices: ${scene.narrative_unit.comedic_device.join(', ')} (+15Ï†ê)`);
                }
                
                // Rhetoric Íµ¨Ï≤¥ÏÑ±
                if (scene.narrative_unit?.rhetoric && 
                    Array.isArray(scene.narrative_unit.rhetoric) &&
                    scene.narrative_unit.rhetoric.length > 0) {
                    sceneScore += 15;
                    console.log(`  ‚úÖ Scene ${index+1} rhetoric techniques: ${scene.narrative_unit.rhetoric.join(', ')} (+15Ï†ê)`);
                }
                
                if (sceneScore >= 60) scenesWithNarrativeDepth++;
                score += sceneScore;
            });
        }
        
        // ÌèâÍ∑†Ìôî
        if (totalScenes > 0) {
            score = Math.round(score / totalScenes);
        }
        
        console.log(`\\n  üìä ÏÑúÏÇ¨ Î∂ÑÏÑù ÍπäÏù¥: ${score}/${maxScore} (${scenesWithNarrativeDepth}/${totalScenes} scenes with depth)\\n`);
        return { score, maxScore, hasNarrativeDepth: score >= 80 };
    }

    /**
     * Ï†ÑÏ≤¥ ULTIMATE ÌÖåÏä§Ìä∏ Ïã§Ìñâ
     */
    async runUltimateTest() {
        console.log('üèÜ TRUE Hybrid VDP v4.0 ULTIMATE ÏµúÏ¢Ö Í≤ÄÏ¶ù');
        console.log('=' .repeat(80));
        console.log(`üìπ ÌÖåÏä§Ìä∏ ÏòÅÏÉÅ: ${REAL_TEST_METADATA.content_id} (ÌñÑÏä§ÌÑ∞ ÏïºÍ∑º)`);
        console.log(`üëÄ Ï°∞ÌöåÏàò: ${REAL_TEST_METADATA.view_count.toLocaleString()}`);
        console.log(`‚ù§Ô∏è Ï¢ãÏïÑÏöî: ${REAL_TEST_METADATA.like_count.toLocaleString()}`);
        console.log('\\nüéØ ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞± ÏôÑÏ†Ñ Î∞òÏòÅ Í≤ÄÏ¶ù:');
        console.log('  1. Îç∞Ïù¥ÌÑ∞ Î∂ÑÎ¶¨ ÌòÑÏÉÅ Ìï¥Í≤∞');
        console.log('  2. Ïó∞Ï∂ú Î∂ÑÏÑù OLD VDP ÏàòÏ§Ä Î≥µÏõê');
        console.log('  3. ÏÑúÏÇ¨ Íµ¨Ï°∞ Î∂ÑÏÑù OLD VDP ÏàòÏ§Ä Î≥µÏõê');
        console.log('');

        try {
            // 1. ULTIMATE VDP ÏÉùÏÑ±
            const ultimateVdp = await this.testUltimateGeneration();
            
            // 2. Îç∞Ïù¥ÌÑ∞ ÌÜµÌï© Í≤ÄÏ¶ù
            const dataIntegration = this.validateDataIntegration(ultimateVdp);
            
            // 3. Ïó∞Ï∂ú Î∂ÑÏÑù ÍπäÏù¥ Í≤ÄÏ¶ù
            const cinematicDepth = this.validateCinematicDepth(ultimateVdp);
            
            // 4. ÏÑúÏÇ¨ Î∂ÑÏÑù ÍπäÏù¥ Í≤ÄÏ¶ù
            const narrativeDepth = this.validateNarrativeDepth(ultimateVdp);
            
            // 5. ÏµúÏ¢Ö ÌèâÍ∞Ä
            const finalScore = Math.round(
                (dataIntegration.score * 0.4) + 
                (cinematicDepth.score * 0.3) + 
                (narrativeDepth.score * 0.3)
            );
            
            const allRequirementsMet = dataIntegration.isIntegrated && 
                                      cinematicDepth.hasOldVdpDepth && 
                                      narrativeDepth.hasNarrativeDepth;
            
            console.log('üèÜ TRUE Hybrid VDP v4.0 ULTIMATE ÏµúÏ¢Ö ÌèâÍ∞Ä');
            console.log('=' .repeat(60));
            console.log(`üîó Îç∞Ïù¥ÌÑ∞ ÌÜµÌï©: ${dataIntegration.score}/100 ${dataIntegration.isIntegrated ? '‚úÖ' : '‚ùå'}`);
            console.log(`üé¨ Ïó∞Ï∂ú Î∂ÑÏÑù ÍπäÏù¥: ${cinematicDepth.score}/100 ${cinematicDepth.hasOldVdpDepth ? '‚úÖ' : '‚ùå'}`);
            console.log(`üìñ ÏÑúÏÇ¨ Î∂ÑÏÑù ÍπäÏù¥: ${narrativeDepth.score}/100 ${narrativeDepth.hasNarrativeDepth ? '‚úÖ' : '‚ùå'}`);
            console.log('-' .repeat(40));
            console.log(`üéØ ÏµúÏ¢Ö Ï†êÏàò: ${finalScore}/100`);
            console.log('');
            
            if (finalScore >= 95 && allRequirementsMet) {
                console.log('üèÜüèÜüèÜ TRUE Hybrid ULTIMATE ÏôÑÏ†Ñ ÏÑ±Í≥µ! ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞± ÏôÑÏ†Ñ Î∞òÏòÅ! üèÜüèÜüèÜ');
                console.log('‚úÖ Îç∞Ïù¥ÌÑ∞ ÏôÑÏ†Ñ ÌÜµÌï© ‚úÖ OLD VDP ÍπäÏù¥ ÏôÑÏ†Ñ Î≥µÏõê ‚úÖ Î™®Îì† Î¨∏Ï†úÏ†ê Ìï¥Í≤∞');
            } else if (finalScore >= 85) {
                console.log('‚úÖ TRUE Hybrid ULTIMATE ÏÑ±Í≥µ! ÎåÄÎ∂ÄÎ∂ÑÏùò ÏöîÍµ¨ÏÇ¨Ìï≠ Ï∂©Ï°±');
            } else {
                console.log('‚ö†Ô∏è Ï∂îÍ∞Ä Í∞úÏÑ† ÌïÑÏöî. ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞± ÏôÑÏ†Ñ Î∞òÏòÅ ÎØ∏Îã¨');
            }
            
            // Í≤∞Í≥º Ï†ÄÏû•
            const testResult = {
                timestamp: new Date().toISOString(),
                metadata: REAL_TEST_METADATA,
                ultimate_vdp: ultimateVdp,
                validations: {
                    data_integration: dataIntegration,
                    cinematic_depth: cinematicDepth,
                    narrative_depth: narrativeDepth
                },
                final_score: finalScore,
                all_requirements_met: allRequirementsMet,
                conclusion: allRequirementsMet ? 'ULTIMATE_SUCCESS' : 'NEEDS_IMPROVEMENT',
                user_feedback_resolved: {
                    data_separation: dataIntegration.isIntegrated,
                    cinematic_analysis: cinematicDepth.hasOldVdpDepth,
                    narrative_analysis: narrativeDepth.hasNarrativeDepth
                }
            };
            
            fs.writeFileSync('./out/true-hybrid-v4-ultimate-test-results.json', JSON.stringify(testResult, null, 2));
            console.log('\\nüíæ ULTIMATE ÌÖåÏä§Ìä∏ Í≤∞Í≥º Ï†ÄÏû•: ./out/true-hybrid-v4-ultimate-test-results.json');
            
            return testResult;
            
        } catch (error) {
            console.error('‚ùå ULTIMATE ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ïã§Ìå®:', error);
            throw error;
        }
    }
}

// ÌÖåÏä§Ìä∏ Ïã§Ìñâ
if (import.meta.url === `file://${process.argv[1]}`) {
    const tester = new UltimateTester();
    tester.runUltimateTest().catch(console.error);
}

export { UltimateTester };